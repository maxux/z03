#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <signal.h>
#include <unistd.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/wait.h>
#include <netinet/in.h>
#include <pthread.h>
#include <math.h>
#include <execinfo.h>
#include <errno.h>
#include <glob.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <dirent.h>

void signal_intercept(int signal, void (*function)(int)) {
	struct sigaction sig;
	
	sigemptyset(&sig.sa_mask);
	
	sig.sa_handler	 = function;
	sig.sa_flags	 = 0;
	
	if((sigaction(signal, &sig, NULL)) == -1)
		perror("sigaction");
}

void signal_handler(int signal) {
	switch(signal) {
		case SIGSEGV:
			printf("Segmentation fault\n");
			exit(EXIT_FAILURE);
		break;
	}
}

int usercode() {
	%s
	return 0;
}

int main(void) {
	signal_intercept(SIGSEGV, signal_handler);
	return usercode();
}
